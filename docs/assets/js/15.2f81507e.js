(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{250:function(t,n,e){"use strict";e.r(n);var i=e(0),s=Object(i.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("在软件设计中，有微软 Office 为模范的大而全哲学，也有以 Unix 为标志的“kiss”原则下“只做一件事并把它做好”的设计理念。到底哪个更好很难说，这并不是一场辩论或者市场份额可以说明的。")]),t._v(" "),e("p",[t._v("在我看来，软件如果多功能，刚好满足我的需求，十分完美。但是另一方面，我又很担心由于大而全却让人在林林总总的功能选择中迷惑，或许插件方式就很好？\n")]),t._v(" "),e("p",[t._v("引起我思考的其实是老版 wiz 的试用过程，当时 wiz 是国内为数不多的而且做得不错的知识管理软件，但是安装的时候，一大堆用不到的什么gtd啊通信录啊林林总总通通一起上来，一打开软件就扑面而来十分混乱。")]),t._v(" "),e("p",[t._v("而我当时需要的却只是文档管理而已，其他对我而已皆是误导阻碍的内容，那时我就在想，如果能够按照自己需要，像安插件一样只添加自己需要的应用就好了。不过现在 wiz 为知笔记给人的感觉就好多了，很多功能被平缓自然地遮盖，想用到的深度用户容易找到，浅尝即止的试用玩家也不会手足无措。这个设计证明了不用插件形式，而尽心搞好功能层次的排布设计，也是一条很好的出路。")]),t._v(" "),e("p",[t._v("后记，我还是没有投入 wiz 的怀抱，因为他的服务器在海外并不稳定，所以还是放弃了。")])])}),[],!1,null,null,null);n.default=s.exports}}]);